// Code generated by go-swagger; DO NOT EDIT.

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"golang.org/x/net/context"
)

// NewPatchDomainsDomainParams creates a new PatchDomainsDomainParams object
// with the default values initialized.
func NewPatchDomainsDomainParams() *PatchDomainsDomainParams {
	var ()
	return &PatchDomainsDomainParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchDomainsDomainParamsWithTimeout creates a new PatchDomainsDomainParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchDomainsDomainParamsWithTimeout(timeout time.Duration) *PatchDomainsDomainParams {
	var ()
	return &PatchDomainsDomainParams{

		timeout: timeout,
	}
}

// NewPatchDomainsDomainParamsWithContext creates a new PatchDomainsDomainParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchDomainsDomainParamsWithContext(ctx context.Context) *PatchDomainsDomainParams {
	var ()
	return &PatchDomainsDomainParams{

		Context: ctx,
	}
}

// NewPatchDomainsDomainParamsWithHTTPClient creates a new PatchDomainsDomainParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchDomainsDomainParamsWithHTTPClient(client *http.Client) *PatchDomainsDomainParams {
	var ()
	return &PatchDomainsDomainParams{
		HTTPClient: client,
	}
}

/*PatchDomainsDomainParams contains all the parameters to send to the API endpoint
for the patch domains domain operation typically these are written to a http.Request
*/
type PatchDomainsDomainParams struct {

	/*Domain
	  Domain to inspect

	*/
	Domain string
	/*ZoneUUID
	  zone uuid to change

	*/
	ZoneUUID PatchDomainsDomainBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch domains domain params
func (o *PatchDomainsDomainParams) WithTimeout(timeout time.Duration) *PatchDomainsDomainParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch domains domain params
func (o *PatchDomainsDomainParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch domains domain params
func (o *PatchDomainsDomainParams) WithContext(ctx context.Context) *PatchDomainsDomainParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch domains domain params
func (o *PatchDomainsDomainParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch domains domain params
func (o *PatchDomainsDomainParams) WithHTTPClient(client *http.Client) *PatchDomainsDomainParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch domains domain params
func (o *PatchDomainsDomainParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomain adds the domain to the patch domains domain params
func (o *PatchDomainsDomainParams) WithDomain(domain string) *PatchDomainsDomainParams {
	o.SetDomain(domain)
	return o
}

// SetDomain adds the domain to the patch domains domain params
func (o *PatchDomainsDomainParams) SetDomain(domain string) {
	o.Domain = domain
}

// WithZoneUUID adds the zoneUUID to the patch domains domain params
func (o *PatchDomainsDomainParams) WithZoneUUID(zoneUUID PatchDomainsDomainBody) *PatchDomainsDomainParams {
	o.SetZoneUUID(zoneUUID)
	return o
}

// SetZoneUUID adds the zoneUuid to the patch domains domain params
func (o *PatchDomainsDomainParams) SetZoneUUID(zoneUUID PatchDomainsDomainBody) {
	o.ZoneUUID = zoneUUID
}

// WriteToRequest writes these params to a swagger request
func (o *PatchDomainsDomainParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param domain
	if err := r.SetPathParam("domain", o.Domain); err != nil {
		return err
	}

	if err := r.SetBodyParam(o.ZoneUUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
