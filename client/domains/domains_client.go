// Code generated by go-swagger; DO NOT EDIT.

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new domains API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for domains API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetDomains lists domains

Optional extended description in Markdown.
*/
func (a *Client) GetDomains(params *GetDomainsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomains",
		Method:             "GET",
		PathPattern:        "/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainsOK), nil

}

/*
GetDomainsDomain shows domain details

Optional extended description in Markdown.
*/
func (a *Client) GetDomainsDomain(params *GetDomainsDomainParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainsDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainsDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainsDomain",
		Method:             "GET",
		PathPattern:        "/domains/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainsDomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainsDomainOK), nil

}

/*
GetDomainsDomainRecords lists records for domain

Optional extended description in Markdown.
*/
func (a *Client) GetDomainsDomainRecords(params *GetDomainsDomainRecordsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainsDomainRecordsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainsDomainRecordsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainsDomainRecords",
		Method:             "GET",
		PathPattern:        "/domains/{domain}/records",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainsDomainRecordsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainsDomainRecordsOK), nil

}

/*
GetDomainsDomainRecordsRecordName lists records for domain matching name

Optional extended description in Markdown.
*/
func (a *Client) GetDomainsDomainRecordsRecordName(params *GetDomainsDomainRecordsRecordNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainsDomainRecordsRecordNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainsDomainRecordsRecordNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainsDomainRecordsRecordName",
		Method:             "GET",
		PathPattern:        "/domains/{domain}/records/{record_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainsDomainRecordsRecordNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainsDomainRecordsRecordNameOK), nil

}

/*
GetDomainsDomainRecordsRecordNameRecordType lists records for domain matching name and type

Optional extended description in Markdown.
*/
func (a *Client) GetDomainsDomainRecordsRecordNameRecordType(params *GetDomainsDomainRecordsRecordNameRecordTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainsDomainRecordsRecordNameRecordTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainsDomainRecordsRecordNameRecordTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainsDomainRecordsRecordNameRecordType",
		Method:             "GET",
		PathPattern:        "/domains/{domain}/records/{record_name}/{record_type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainsDomainRecordsRecordNameRecordTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainsDomainRecordsRecordNameRecordTypeOK), nil

}

/*
PatchDomainsDomain updates domain zone uuid

Optional extended description in Markdown.
*/
func (a *Client) PatchDomainsDomain(params *PatchDomainsDomainParams, authInfo runtime.ClientAuthInfoWriter) (*PatchDomainsDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDomainsDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchDomainsDomain",
		Method:             "PATCH",
		PathPattern:        "/domains/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDomainsDomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDomainsDomainOK), nil

}

/*
PostDomains creates a domain

Optional extended description in Markdown.
*/
func (a *Client) PostDomains(params *PostDomainsParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomains",
		Method:             "POST",
		PathPattern:        "/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainsCreated), nil

}

/*
PostDomainsDomainRecords adds a record for a domain

Optional extended description in Markdown.
*/
func (a *Client) PostDomainsDomainRecords(params *PostDomainsDomainRecordsParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainsDomainRecordsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainsDomainRecordsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainsDomainRecords",
		Method:             "POST",
		PathPattern:        "/domains/{domain}/records",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainsDomainRecordsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainsDomainRecordsCreated), nil

}

/*
PutDomainsDomainRecords changes all records for a domain

Optional extended description in Markdown.
*/
func (a *Client) PutDomainsDomainRecords(params *PutDomainsDomainRecordsParams, authInfo runtime.ClientAuthInfoWriter) (*PutDomainsDomainRecordsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDomainsDomainRecordsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDomainsDomainRecords",
		Method:             "PUT",
		PathPattern:        "/domains/{domain}/records",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDomainsDomainRecordsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDomainsDomainRecordsCreated), nil

}

/*
PutDomainsDomainRecordsRecordName changes all records for a domain

Optional extended description in Markdown.
*/
func (a *Client) PutDomainsDomainRecordsRecordName(params *PutDomainsDomainRecordsRecordNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutDomainsDomainRecordsRecordNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDomainsDomainRecordsRecordNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDomainsDomainRecordsRecordName",
		Method:             "PUT",
		PathPattern:        "/domains/{domain}/records/{record_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDomainsDomainRecordsRecordNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDomainsDomainRecordsRecordNameCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
