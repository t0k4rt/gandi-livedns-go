// Code generated by go-swagger; DO NOT EDIT.

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	models "github.com/t0k4rt/gandi-livedns-go/models"
)

// PostDomainsDomainRecordsReader is a Reader for the PostDomainsDomainRecords structure.
type PostDomainsDomainRecordsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostDomainsDomainRecordsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostDomainsDomainRecordsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostDomainsDomainRecordsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPostDomainsDomainRecordsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostDomainsDomainRecordsCreated creates a PostDomainsDomainRecordsCreated with default headers values
func NewPostDomainsDomainRecordsCreated() *PostDomainsDomainRecordsCreated {
	return &PostDomainsDomainRecordsCreated{}
}

/*PostDomainsDomainRecordsCreated handles this case with default header values.

OK
*/
type PostDomainsDomainRecordsCreated struct {
	Payload *models.Return200
}

func (o *PostDomainsDomainRecordsCreated) Error() string {
	return fmt.Sprintf("[POST /domains/{domain}/records][%d] postDomainsDomainRecordsCreated  %+v", 201, o.Payload)
}

func (o *PostDomainsDomainRecordsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Return200)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDomainsDomainRecordsBadRequest creates a PostDomainsDomainRecordsBadRequest with default headers values
func NewPostDomainsDomainRecordsBadRequest() *PostDomainsDomainRecordsBadRequest {
	return &PostDomainsDomainRecordsBadRequest{}
}

/*PostDomainsDomainRecordsBadRequest handles this case with default header values.

Not OK
*/
type PostDomainsDomainRecordsBadRequest struct {
	Payload *models.Return400
}

func (o *PostDomainsDomainRecordsBadRequest) Error() string {
	return fmt.Sprintf("[POST /domains/{domain}/records][%d] postDomainsDomainRecordsBadRequest  %+v", 400, o.Payload)
}

func (o *PostDomainsDomainRecordsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Return400)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDomainsDomainRecordsDefault creates a PostDomainsDomainRecordsDefault with default headers values
func NewPostDomainsDomainRecordsDefault(code int) *PostDomainsDomainRecordsDefault {
	return &PostDomainsDomainRecordsDefault{
		_statusCode: code,
	}
}

/*PostDomainsDomainRecordsDefault handles this case with default header values.

Unexpected error
*/
type PostDomainsDomainRecordsDefault struct {
	_statusCode int

	Payload *models.Return40x
}

// Code gets the status code for the post domains domain records default response
func (o *PostDomainsDomainRecordsDefault) Code() int {
	return o._statusCode
}

func (o *PostDomainsDomainRecordsDefault) Error() string {
	return fmt.Sprintf("[POST /domains/{domain}/records][%d] PostDomainsDomainRecords default  %+v", o._statusCode, o.Payload)
}

func (o *PostDomainsDomainRecordsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Return40x)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
