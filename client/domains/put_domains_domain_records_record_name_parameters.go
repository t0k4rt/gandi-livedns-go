// Code generated by go-swagger; DO NOT EDIT.

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"golang.org/x/net/context"
)

// NewPutDomainsDomainRecordsRecordNameParams creates a new PutDomainsDomainRecordsRecordNameParams object
// with the default values initialized.
func NewPutDomainsDomainRecordsRecordNameParams() *PutDomainsDomainRecordsRecordNameParams {
	var ()
	return &PutDomainsDomainRecordsRecordNameParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutDomainsDomainRecordsRecordNameParamsWithTimeout creates a new PutDomainsDomainRecordsRecordNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutDomainsDomainRecordsRecordNameParamsWithTimeout(timeout time.Duration) *PutDomainsDomainRecordsRecordNameParams {
	var ()
	return &PutDomainsDomainRecordsRecordNameParams{

		timeout: timeout,
	}
}

// NewPutDomainsDomainRecordsRecordNameParamsWithContext creates a new PutDomainsDomainRecordsRecordNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutDomainsDomainRecordsRecordNameParamsWithContext(ctx context.Context) *PutDomainsDomainRecordsRecordNameParams {
	var ()
	return &PutDomainsDomainRecordsRecordNameParams{

		Context: ctx,
	}
}

// NewPutDomainsDomainRecordsRecordNameParamsWithHTTPClient creates a new PutDomainsDomainRecordsRecordNameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutDomainsDomainRecordsRecordNameParamsWithHTTPClient(client *http.Client) *PutDomainsDomainRecordsRecordNameParams {
	var ()
	return &PutDomainsDomainRecordsRecordNameParams{
		HTTPClient: client,
	}
}

/*PutDomainsDomainRecordsRecordNameParams contains all the parameters to send to the API endpoint
for the put domains domain records record name operation typically these are written to a http.Request
*/
type PutDomainsDomainRecordsRecordNameParams struct {

	/*Domain
	  Domain to inspect

	*/
	Domain string
	/*Record
	  Record to add

	*/
	Record PutDomainsDomainRecordsRecordNameBody
	/*RecordName
	  Domain to inspect

	*/
	RecordName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put domains domain records record name params
func (o *PutDomainsDomainRecordsRecordNameParams) WithTimeout(timeout time.Duration) *PutDomainsDomainRecordsRecordNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put domains domain records record name params
func (o *PutDomainsDomainRecordsRecordNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put domains domain records record name params
func (o *PutDomainsDomainRecordsRecordNameParams) WithContext(ctx context.Context) *PutDomainsDomainRecordsRecordNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put domains domain records record name params
func (o *PutDomainsDomainRecordsRecordNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put domains domain records record name params
func (o *PutDomainsDomainRecordsRecordNameParams) WithHTTPClient(client *http.Client) *PutDomainsDomainRecordsRecordNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put domains domain records record name params
func (o *PutDomainsDomainRecordsRecordNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomain adds the domain to the put domains domain records record name params
func (o *PutDomainsDomainRecordsRecordNameParams) WithDomain(domain string) *PutDomainsDomainRecordsRecordNameParams {
	o.SetDomain(domain)
	return o
}

// SetDomain adds the domain to the put domains domain records record name params
func (o *PutDomainsDomainRecordsRecordNameParams) SetDomain(domain string) {
	o.Domain = domain
}

// WithRecord adds the record to the put domains domain records record name params
func (o *PutDomainsDomainRecordsRecordNameParams) WithRecord(record PutDomainsDomainRecordsRecordNameBody) *PutDomainsDomainRecordsRecordNameParams {
	o.SetRecord(record)
	return o
}

// SetRecord adds the record to the put domains domain records record name params
func (o *PutDomainsDomainRecordsRecordNameParams) SetRecord(record PutDomainsDomainRecordsRecordNameBody) {
	o.Record = record
}

// WithRecordName adds the recordName to the put domains domain records record name params
func (o *PutDomainsDomainRecordsRecordNameParams) WithRecordName(recordName string) *PutDomainsDomainRecordsRecordNameParams {
	o.SetRecordName(recordName)
	return o
}

// SetRecordName adds the recordName to the put domains domain records record name params
func (o *PutDomainsDomainRecordsRecordNameParams) SetRecordName(recordName string) {
	o.RecordName = recordName
}

// WriteToRequest writes these params to a swagger request
func (o *PutDomainsDomainRecordsRecordNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param domain
	if err := r.SetPathParam("domain", o.Domain); err != nil {
		return err
	}

	if err := r.SetBodyParam(o.Record); err != nil {
		return err
	}

	// path param record_name
	if err := r.SetPathParam("record_name", o.RecordName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
