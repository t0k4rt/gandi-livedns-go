// Code generated by go-swagger; DO NOT EDIT.

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
	models "github.com/t0k4rt/gandi-livedns-go/models"
)

// PatchDomainsDomainReader is a Reader for the PatchDomainsDomain structure.
type PatchDomainsDomainReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchDomainsDomainReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchDomainsDomainOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchDomainsDomainBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchDomainsDomainDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchDomainsDomainOK creates a PatchDomainsDomainOK with default headers values
func NewPatchDomainsDomainOK() *PatchDomainsDomainOK {
	return &PatchDomainsDomainOK{}
}

/*PatchDomainsDomainOK handles this case with default header values.

OK
*/
type PatchDomainsDomainOK struct {
	Payload []*models.Return200
}

func (o *PatchDomainsDomainOK) Error() string {
	return fmt.Sprintf("[PATCH /domains/{domain}][%d] patchDomainsDomainOK  %+v", 200, o.Payload)
}

func (o *PatchDomainsDomainOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDomainsDomainBadRequest creates a PatchDomainsDomainBadRequest with default headers values
func NewPatchDomainsDomainBadRequest() *PatchDomainsDomainBadRequest {
	return &PatchDomainsDomainBadRequest{}
}

/*PatchDomainsDomainBadRequest handles this case with default header values.

Not OK
*/
type PatchDomainsDomainBadRequest struct {
	Payload *models.Return400
}

func (o *PatchDomainsDomainBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /domains/{domain}][%d] patchDomainsDomainBadRequest  %+v", 400, o.Payload)
}

func (o *PatchDomainsDomainBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Return400)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDomainsDomainDefault creates a PatchDomainsDomainDefault with default headers values
func NewPatchDomainsDomainDefault(code int) *PatchDomainsDomainDefault {
	return &PatchDomainsDomainDefault{
		_statusCode: code,
	}
}

/*PatchDomainsDomainDefault handles this case with default header values.

Unexpected error
*/
type PatchDomainsDomainDefault struct {
	_statusCode int

	Payload *models.Return40x
}

// Code gets the status code for the patch domains domain default response
func (o *PatchDomainsDomainDefault) Code() int {
	return o._statusCode
}

func (o *PatchDomainsDomainDefault) Error() string {
	return fmt.Sprintf("[PATCH /domains/{domain}][%d] PatchDomainsDomain default  %+v", o._statusCode, o.Payload)
}

func (o *PatchDomainsDomainDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Return40x)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchDomainsDomainBody patch domains domain body
swagger:model PatchDomainsDomainBody
*/
type PatchDomainsDomainBody struct {

	// zone uuid
	// Required: true
	ZoneUUID *string `json:"zone_uuid"`
}

// Validate validates this patch domains domain body
func (o *PatchDomainsDomainBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateZoneUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchDomainsDomainBody) validateZoneUUID(formats strfmt.Registry) error {

	if err := validate.Required("zone_uuid"+"."+"zone_uuid", "body", o.ZoneUUID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchDomainsDomainBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchDomainsDomainBody) UnmarshalBinary(b []byte) error {
	var res PatchDomainsDomainBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
