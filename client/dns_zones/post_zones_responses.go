// Code generated by go-swagger; DO NOT EDIT.

package dns_zones

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
	models "github.com/tokart/gandi-livedns-go/models"
)

// PostZonesReader is a Reader for the PostZones structure.
type PostZonesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostZonesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostZonesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostZonesCreated creates a PostZonesCreated with default headers values
func NewPostZonesCreated() *PostZonesCreated {
	return &PostZonesCreated{}
}

/*PostZonesCreated handles this case with default header values.

OK
*/
type PostZonesCreated struct {
	Payload *models.ReturnMessage
}

func (o *PostZonesCreated) Error() string {
	return fmt.Sprintf("[POST /zones][%d] postZonesCreated  %+v", 201, o.Payload)
}

func (o *PostZonesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReturnMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostZonesBody post zones body
swagger:model PostZonesBody
*/
type PostZonesBody struct {

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this post zones body
func (o *PostZonesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostZonesBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("zoneName"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostZonesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostZonesBody) UnmarshalBinary(b []byte) error {
	var res PostZonesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
