// Code generated by go-swagger; DO NOT EDIT.

package dns_zones

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
	models "github.com/t0k4rt/gandi-livedns-go/models"
)

// PatchZonesUUIDReader is a Reader for the PatchZonesUUID structure.
type PatchZonesUUIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchZonesUUIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchZonesUUIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchZonesUUIDOK creates a PatchZonesUUIDOK with default headers values
func NewPatchZonesUUIDOK() *PatchZonesUUIDOK {
	return &PatchZonesUUIDOK{}
}

/*PatchZonesUUIDOK handles this case with default header values.

OK
*/
type PatchZonesUUIDOK struct {
	Payload *models.Zone
}

func (o *PatchZonesUUIDOK) Error() string {
	return fmt.Sprintf("[PATCH /zones/{uuid}][%d] patchZonesUuidOK  %+v", 200, o.Payload)
}

func (o *PatchZonesUUIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Zone)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchZonesUUIDBody patch zones UUID body
swagger:model PatchZonesUUIDBody
*/
type PatchZonesUUIDBody struct {

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this patch zones UUID body
func (o *PatchZonesUUIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchZonesUUIDBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("zoneName"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchZonesUUIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchZonesUUIDBody) UnmarshalBinary(b []byte) error {
	var res PatchZonesUUIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
